this code creates an animation in streamlit:
'''
        # Add progress bar in sidebar
    progress_bar = st.sidebar.progress(0)
    status_text = st.sidebar.empt
    
    # Parameters
    star_radius = 1.0
    planet_radius = 0.3
    orbit_radius = 3.0
    angular_velocity = 0.02
    frames = 315
    with _lock:
        # Create figure and subplots
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))
        # Set up first subplot (edge-on view)
        ax1.set_aspect('equal')
        ax1.set_xlim(-5, 5)
        ax1.set_ylim(-5, 5)
        ax1.set_xlabel('X')
        ax1.set_ylabel('Y')
        ax1.set_title('Edge-On View')
        # Set up second subplot (birds-eye view)
        ax2.set_aspect('equal')
        ax2.set_xlim(-5, 5)
        ax2.set_ylim(-5, 5)
        ax2.set_xlabel('X')
        ax2.set_ylabel('Y')
        ax2.set_title('Above View')
        # Draw line segment representing the orbital plane (edge-on view)
        orbital_plane_edgeon, = ax1.plot([-orbit_radius, orbit_radius], [0, 0], linestyle='--', color='gray')
        ax1.annotate('Orbital Plane', xy=(2, 0), xytext=(2, -2), arrowprops=dict(facecolor='black', arrowstyle='->'))
        # Draw circle segment representing the orbital plane (above view)
        theta = np.linspace(0, 2*np.pi, 100)
        orbital_plane_above, = ax2.plot(orbit_radius * np.cos(theta), orbit_radius * np.sin(theta), linestyle='--', color='gray')
        ax2.annotate('Orbital Plane', xy=(0, 3), xytext=(2, 4), arrowprops=dict(facecolor='black', arrowstyle='->'))
        # Draw the star and planet in both subplots
        star = ax1.add_patch(plt.Circle((0, 0), star_radius, color='yellow'))
        planet_edgeon = ax1.add_patch(plt.Circle((0, orbit_radius), planet_radius, color='blue'))
        star = ax2.add_patch(plt.Circle((0, 0), star_radius, color='yellow'))
        planet_above = ax2.add_patch(plt.Circle((0, orbit_radius), planet_radius, color='blue'))
        ax1.annotate('Star', xy=(-1, 0), xytext=(-1, -1.5))
        ax2.annotate('Star', xy=(0, 0), xytext=(0.5, -1.5))
        # Animation function
        def update(frame):
            angle = frame * angular_velocity
            # Update position of the planet in edge-on view
            x_edgeon, y_edgeon = orbit_radius * np.cos(angle), 0
            planet_edgeon.set_center((x_edgeon, y_edgeon))
            # Update position of the planet in above view
            x_above, y_above = orbit_radius * np.sin(angle), -orbit_radius * np.cos(angle)
            planet_above.set_center((x_above, y_above))
            # Check if the planet is behind the star in both views
            if np.pi/2 < angle % (2 * np.pi) < 3 * np.pi / 2:
                planet_edgeon.set_alpha(0.2)
                planet_above.set_alpha(0.2)
            else:
                planet_edgeon.set_alpha(1.0)
                planet_above.set_alpha(1.0)
            return planet_edgeon, planet_above,
        # Create animation
        ani = FuncAnimation(fig, update, frames=frames, blit=True)
        # Convert animation to HTML
        #Convert the animation to HTML format using to_jshtml() method of the FuncAnimation object.
        #html = ani.to_html5_video()
        # Display the animation in Streamlit
        components.html(ani.to_jshtml(), height=100, width=300)
    
    # Animation 
    progress_bar.empty() # clear elements by calling them empty
    '''